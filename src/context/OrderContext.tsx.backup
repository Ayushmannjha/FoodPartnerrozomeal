import React, { createContext, useContext, useReducer, type ReactNode, useEffect, useCallback } from 'react';
import type   // Handle WebSocket orders reception
  useEffect(() => {
    if (receivedOrders && receivedOrders.length > 0) {
      console.log('ðŸ“¦ Received orders from WebSocket:', receivedOrders.length);
      dispatch({ type: 'SET_ORDERS', payload: receivedOrders });
      dispatch({ type: 'SET_ERROR', payload: null }); // Clear any previous errors
    }
  }, [receivedOrders]);} from '../types/order';
import { useAuth } from './AuthContext';
import { useWebSocket } from '../hooks/useWebSocket';

interface OrderState {
  orders: Order[];
  selectedOrder: Order | null;
  loading: boolean;
  error: string | null;
  filters: {
    status: number | null;
    dateFrom: string | null;
    dateTo: string | null;
    searchTerm: string;
  };
}

type OrderAction =
  | { type: 'SET_ORDERS'; payload: Order[] }
  | { type: 'ADD_ORDER'; payload: Order }
  | { type: 'SET_SELECTED_ORDER'; payload: Order | null }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_FILTERS'; payload: Partial<OrderState['filters']> }
  | { type: 'UPDATE_ORDER'; payload: Order}
  | { type: 'REMOVE_ORDER'; payload: string };

const initialState: OrderState = {
  orders: [],
  selectedOrder: null,
  loading: false,
  error: null,
  filters: {
    status: null,
    dateFrom: null,
    dateTo: null,
    searchTerm: ''
  }
};

const orderReducer = (state: OrderState, action: OrderAction): OrderState => {
  switch (action.type) {
    case 'SET_ORDERS':
      return { ...state, orders: action.payload, loading: false };
    
    case 'ADD_ORDER':
      const orderExists = state.orders.some(order => order.orderId === action.payload.orderId);
      if (orderExists) return state;
      return { 
        ...state, 
        orders: [action.payload, ...state.orders]
      };
    
    case 'SET_SELECTED_ORDER':
      return { ...state, selectedOrder: action.payload };
    
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    
    case 'SET_ERROR':
      return { ...state, error: action.payload, loading: false };
    
    case 'SET_FILTERS':
      return { ...state, filters: { ...state.filters, ...action.payload } };
    
    case 'UPDATE_ORDER':
      return {
        ...state,
        orders: state.orders.map(order =>
          order.orderId === action.payload.orderId ? action.payload : order
        )
      };
    
    case 'REMOVE_ORDER':
      return {
        ...state,
        orders: state.orders.filter(order => order.orderId !== action.payload)
      };
    
    default:
      return state;
  }
};

interface OrderContextType {
  state: OrderState;
  dispatch: React.Dispatch<OrderAction>;
  // Helper functions
  addOrder: (order: Order) => void;
  updateOrder: (order: Order) => void;
  removeOrder: (orderId: string) => void;
  setFilters: (filters: Partial<OrderState['filters']>) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  // WebSocket functions
  refreshWebSocket: () => void;
  updateOrderStatus: (orderId: string, status: string) => void;
  acceptOrderWs: (orderId: string, partnerId: string) => void;
  // WebSocket state
  wsConnected: boolean;
  wsError: string | null;
  reconnectAttempts: number;
}

const OrderContext = createContext<OrderContextType | null>(null);

export const OrderProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(orderReducer, initialState);
  const { user } = useAuth();

  // Initialize WebSocket with user's pincode
  const {
    isConnected: wsConnected,
    connectionError: wsError,
    reconnectAttempts,
    receivedOrders,
    refresh: refreshWebSocket,
    updateStatus: updateOrderStatus,
    acceptOrderWs,
  } = useWebSocket(user?.pincode || undefined);

  // Handle WebSocket orders reception
  useEffect(() => {
    if (receivedOrders.length > 0) {
      console.log('ï¿½ Received orders from WebSocket:', receivedOrders.length);
      dispatch({ type: 'SET_ORDERS', payload: receivedOrders });
      dispatch({ type: 'SET_ERROR', payload: null }); // Clear any previous errors
    }
  }, [receivedOrders]);

  // Handle WebSocket errors
  useEffect(() => {
    if (wsError) {
      console.error('ðŸš¨ WebSocket error in OrderContext:', wsError);
      dispatch({ type: 'SET_ERROR', payload: `WebSocket Error: ${wsError}` });
    }
  }, [wsError]);

  // Helper functions
  const addOrder = useCallback((order: Order) => {
    dispatch({ type: 'ADD_ORDER', payload: order });
  }, []);

  const updateOrder = useCallback((order: Order) => {
    dispatch({ type: 'UPDATE_ORDER', payload: order });
  }, []);

  const removeOrder = useCallback((orderId: string) => {
    dispatch({ type: 'REMOVE_ORDER', payload: orderId });
  }, []);

  const setFilters = useCallback((filters: Partial<OrderState['filters']>) => {
    dispatch({ type: 'SET_FILTERS', payload: filters });
  }, []);

  const setLoading = useCallback((loading: boolean) => {
    dispatch({ type: 'SET_LOADING', payload: loading });
  }, []);

  const setError = useCallback((error: string | null) => {
    dispatch({ type: 'SET_ERROR', payload: error });
  }, []);

  const contextValue: OrderContextType = {
    state,
    dispatch,
    addOrder,
    updateOrder,
    removeOrder,
    setFilters,
    setLoading,
    setError,
    refreshWebSocket,
    updateOrderStatus,
    acceptOrderWs,
    wsConnected,
    wsError,
    reconnectAttempts,
  };

  return (
    <OrderContext.Provider value={contextValue}>
      {children}
    </OrderContext.Provider>
  );
};

// Main hook
export const useOrderContext = () => {
  const context = useContext(OrderContext);
  if (!context) {
    throw new Error('useOrderContext must be used within an OrderProvider');
  }
  return context;
};

// Convenience hook for filters
export const useOrderFilters = () => {
  const { state, setFilters } = useOrderContext();
  return {
    filters: state.filters,
    setFilters,
  };
};

// Convenience hook for WebSocket
export const useOrderWebSocket = () => {
  const { 
    wsConnected, 
    wsError, 
    reconnectAttempts, 
    refreshWebSocket, 
    updateOrderStatus, 
    acceptOrderWs 
  } = useOrderContext();
  
  return {
    wsConnected,
    wsError,
    reconnectAttempts,
    refreshWebSocket,
    updateOrderStatus,
    acceptOrderWs,
  };
};